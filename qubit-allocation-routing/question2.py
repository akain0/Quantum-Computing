from qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit, transpile, transpiler
from qiskit.transpiler import CouplingMap
from utils import get_benchmark_dict

workload_list = get_benchmark_dict("SWAP_Benchmarks")

def create_coupling_maps():
    """
    Generate each coupling map as shown above using transpiler.CouplingMap and store them in the dictionary provided using the given keys.

    Args: 
        None
    Return:
        output_dict: dict[str, qiskit.transpiler.CouplingMap]
    """

    coupling_maps = {}
    coupling_maps['GRID 5X5'] = None
    coupling_maps['GRID 5X4'] = None
    coupling_maps['GRID 7X3'] = None
    coupling_maps['RING 20'] = None
    ############################################################################
    # Student code begin
    ############################################################################
    
    coupling_maps['GRID 5X5'] = CouplingMap.from_grid(5,5)
    coupling_maps['GRID 5X4'] = CouplingMap.from_grid(5,4)
    coupling_maps['GRID 7X3'] = CouplingMap.from_grid(7,3)
    coupling_maps['RING 20'] = CouplingMap.from_ring(20)



    ############################################################################
    # Student code end
    ############################################################################

    return coupling_maps


def average_depth_change():
    """
    calculate the average change of circuit depth when transpiling the benchmark circuits for given coupling maps,
    using SABRE for routing and mapping. You need to return a dictionary with benchmark circuits' names as keys and
    change of circuit depth averaged over all coupling maps.
    
    You are expected to use the same names of circuits generated by `get_benchmark_dict`.
    
    Args: 
        None
    Return:
        output_dict: dict[str, float]
    """
    
    output_dict = {}
    coupling_maps = create_coupling_maps()
    ############################################################################
    # Student code begin
    ############################################################################

    for key, value in workload_list.items():
        diff=0
        for _, coupling_map in coupling_maps.items():
            original_depth = value.depth()
            transpiled_qc = transpile(value, coupling_map=coupling_map, optimization_level=3)
            new_depth = transpiled_qc.depth()
            diff += new_depth-original_depth
        output_dict[key] = diff/4
    
    ############################################################################
    # Student code end
    ############################################################################
    print(output_dict)
    return output_dict


def average_nswap_change():
    """
    Calculate the average number of swaps inserted when transpiling the benchmark circuits for given coupling maps,
    using SABRE for routing and mapping. You need to return a dictionary with benchmark circuits' names as keys and
    number of swaps inserted averaged over all coupling maps.

    You are expected to use the same names of circuits generated by `get_benchmark_dict`.
    
    Args: 
        None
    Return:
        output_dict: dict[str, float]
    """
    output_dict = {}
    coupling_maps = create_coupling_maps()
    ############################################################################
    # Student code begin
    ############################################################################

    for key, value in workload_list.items():
        swap_count=0
        for _, coupling_map in coupling_maps.items():
            transpiled_qc = transpile(value, coupling_map=coupling_map, optimization_level=3)
            swap_count += transpiled_qc.count_ops().get('swap', 0)
        output_dict[key] = swap_count/4
    print(output_dict)

    
    ############################################################################
    # Student code end
    ############################################################################

    return output_dict
